{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\nfunction useViewport(_ref) {\n  let {\n    visualElement,\n    whileInView,\n    onViewportEnter,\n    onViewportLeave,\n    viewport = {}\n  } = _ref;\n  const state = useRef({\n    hasEnteredView: false,\n    isInView: false\n  });\n  let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n  if (viewport.once && state.current.hasEnteredView) shouldObserve = false;\n  const useObserver = typeof IntersectionObserver === \"undefined\" ? useMissingIntersectionObserver : useIntersectionObserver;\n  useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n  some: 0,\n  all: 1\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, _ref2) {\n  let {\n    root,\n    margin: rootMargin,\n    amount = \"some\",\n    once\n  } = _ref2;\n  useEffect(() => {\n    if (!shouldObserve || !visualElement.current) return;\n    const options = {\n      root: root === null || root === void 0 ? void 0 : root.current,\n      rootMargin,\n      threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n    };\n    const intersectionCallback = entry => {\n      const {\n        isIntersecting\n      } = entry;\n      /**\n       * If there's been no change in the viewport state, early return.\n       */\n      if (state.isInView === isIntersecting) return;\n      state.isInView = isIntersecting;\n      /**\n       * Handle hasEnteredView. If this is only meant to run once, and\n       * element isn't visible, early return. Otherwise set hasEnteredView to true.\n       */\n      if (once && !isIntersecting && state.hasEnteredView) {\n        return;\n      } else if (isIntersecting) {\n        state.hasEnteredView = true;\n      }\n      if (visualElement.animationState) {\n        visualElement.animationState.setActive(AnimationType.InView, isIntersecting);\n      }\n      /**\n       * Use the latest committed props rather than the ones in scope\n       * when this observer is created\n       */\n      const props = visualElement.getProps();\n      const callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;\n      callback && callback(entry);\n    };\n    return observeIntersection(visualElement.current, options, intersectionCallback);\n  }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, _ref3) {\n  let {\n    fallback = true\n  } = _ref3;\n  useEffect(() => {\n    if (!shouldObserve || !fallback) return;\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n    }\n    /**\n     * Fire this in an rAF because, at this point, the animation state\n     * won't have flushed for the first time and there's certain logic in\n     * there that behaves differently on the initial animation.\n     *\n     * This hook should be quite rarely called so setting this in an rAF\n     * is preferred to changing the behaviour of the animation state.\n     */\n    requestAnimationFrame(() => {\n      state.hasEnteredView = true;\n      const {\n        onViewportEnter\n      } = visualElement.getProps();\n      onViewportEnter && onViewportEnter(null);\n      if (visualElement.animationState) {\n        visualElement.animationState.setActive(AnimationType.InView, true);\n      }\n    });\n  }, [shouldObserve]);\n}\nexport { useViewport };","map":{"version":3,"names":["useRef","useEffect","AnimationType","warnOnce","observeIntersection","useViewport","_ref","visualElement","whileInView","onViewportEnter","onViewportLeave","viewport","state","hasEnteredView","isInView","shouldObserve","Boolean","once","current","useObserver","IntersectionObserver","useMissingIntersectionObserver","useIntersectionObserver","thresholdNames","some","all","_ref2","root","margin","rootMargin","amount","options","threshold","intersectionCallback","entry","isIntersecting","animationState","setActive","InView","props","getProps","callback","_ref3","fallback","process","env","NODE_ENV","requestAnimationFrame"],"sources":["/Users/tristan/Documents/GitHub/portolio-starter/node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nfunction useViewport({ visualElement, whileInView, onViewportEnter, onViewportLeave, viewport = {}, }) {\n    const state = useRef({\n        hasEnteredView: false,\n        isInView: false,\n    });\n    let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView)\n        shouldObserve = false;\n    const useObserver = typeof IntersectionObserver === \"undefined\"\n        ? useMissingIntersectionObserver\n        : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, { root, margin: rootMargin, amount = \"some\", once }) {\n    useEffect(() => {\n        if (!shouldObserve || !visualElement.current)\n            return;\n        const options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const intersectionCallback = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (state.isInView === isIntersecting)\n                return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const props = visualElement.getProps();\n            const callback = isIntersecting\n                ? props.onViewportEnter\n                : props.onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(visualElement.current, options, intersectionCallback);\n    }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, { fallback = true }) {\n    useEffect(() => {\n        if (!shouldObserve || !fallback)\n            return;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */\n        requestAnimationFrame(() => {\n            state.hasEnteredView = true;\n            const { onViewportEnter } = visualElement.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, true);\n            }\n        });\n    }, [shouldObserve]);\n}\n\nexport { useViewport };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}